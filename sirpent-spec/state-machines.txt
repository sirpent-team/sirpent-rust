New,
Versioned,
Welcome,
Identify { player: Option<Player> },
Identified { player: Player },
WaitingForGame,
NewGame(Game),
ReadyToDecide,
Deciding,
Decided(Move),
Won,
Died(CauseOfDeath),
Error(ProtocolError),

Socket opened
tell running version,
  State::New -> State::Versioned
tell them server settings,
  State::Versioned -> State::Welcome
read their player name and details,
  State::Welcome -> State::Identify
dedupe against other players,
  State::Identify -> State::Identified
start waiting for game,
  State::Identified -> State::WaitingForGame
game begins so tell them game settings,
  State::WaitingForGame -> State::NewGame
trivially transition (maybe skip this one first time),
  State::NewGame -> State::ReadyToDecide
have new turn to ask them for a move on,
  State::ReadyToDecide -> State::Deciding
have either a direction or an error,
  State::Deciding -> State::Decided(Move)
diagnose Move,
  State::Decided(Ok(Direction)) -> State::ReadyToDecide
  State::Decided(Err(ProtocolError)) -> State::CauseOfDeath(From::from(protocol_err))

before NewGame, ProtocolError should lead to Error(ProtocolError)
from NewGame onwards, ProtocolError should lead to Died(CauseOfDeath)

GLOBAL STATE MACHINE
New,
Versioned,
Welcome,
Identify { player: Option<Player> },
Identified { player: Player },
WaitingForGame,
PlayingGame

GAME STATE MACHINE
ReadyToDecide,
Deciding,
Decided(Move),
Won,
Died(CauseOfDeath),

CONNECTION STATE MACHINE (BASIC)
Ok(())
Err(ProtocolError)

It would help to refactor Command such that the Connection could verify the variant being used.
Not sure quite how to.
